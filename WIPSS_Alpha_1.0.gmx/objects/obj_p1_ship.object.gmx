<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_p1_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /**************************************/
 /*** Ships movement variables       ***/
 /**************************************/
  
 var_moveRight = 5;
 var_moveLeft  = 5;
 var_speed     = 2
 var_speedX    = 0;
 var_speedY    = 0;
 var_direction = 0; 
 var_accel     = 4;
 var_ship_img  = 0; 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> var_keyRight     = keyboard_check (global.kb_mvRight);
 var_keyLeft      = keyboard_check (global.kb_mvLeft);
 var_keyBooster   = keyboard_check (global.kb_shipBoost); 
 var_keyForward   = keyboard_check (global.kb_mvForward);
 var_keyBackword  = keyboard_check (global.kb_mvBackword);
 
 var_keyIsMoving  = keyboard_check_pressed (global.kb_mvForward) or keyboard_check_pressed (global.kb_mvBackword);
 var_keyNotMoving = keyboard_check_released (global.kb_mvForward) or keyboard_check_released (global.kb_mvBackword);
 var_shootBullet  = keyboard_check_pressed (global.kb_mvShoot);
 
 var_ship_img = 0;
 var_speedX   = 0;
 
 /************************************************/
 /*** Ship Movement codes. Triggered on        ***/
 /*** key events.                              ***/
 /*** @var_keyForward: Moves forward           ***/
 /*** @var_ship_img: Change ship image index   ***/
 /************************************************/
 
  if (var_keyForward) {
     var_ship_img = 1;
     var_speed   += var_accel;
 }
 
 if (var_keyBackword) {
     var_ship_img = 2;
     var_speed   -= var_accel;
 }

 /***********************************************************************/
 /*** Using legacy sound functions                                    ***/
 /*** The new sound engine seems to play the sound differently        ***/
 /*** causing the sound file to sound staticky at a certain point     ***/
 /*** Legacy Sound functions:                                         ***/ 
 /***   @sound_play ()                                                ***/
 /***   @sound_stop ()                                                ***/
 /***********************************************************************/
 
 if (var_keyIsMoving)  {
 
     sound_play (global.ship_moveSND);
     sound_loop (global.ship_moveSND);
 }
 
 if (var_keyNotMoving) sound_stop (global.ship_moveSND);  
 
 //Turn left, right.
 if (var_keyRight) var_direction += 5;
 if (var_keyLeft) var_direction  -= 5;

 var_speed *= .8;
 
 //change the rotation of sprite
 image_angle = var_direction;
 image_index = var_ship_img;
 
 var_speedX = lengthdir_x (var_speed,var_direction);
 var_speedY = lengthdir_y (var_speed,var_direction);

  repeat (abs (var_speedX)) {
     x += sign(var_speedX);
 }
 
 repeat (abs (var_speedY)) {
     y += sign (var_speedY);
 }
 
 if (var_shootBullet) {
     with (instance_create (x, y, obj_laser1)) {    
           direction   =  obj_p1_ship.var_direction;
           image_angle = direction;
           
           sound_play (global.ship_shootSND);
           move_towards_point (x, y, var_bulletSpeed * 2);
     }
 }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>75,83</point>
    <point>83,83</point>
  </PhysicsShapePoints>
</object>
